"""
Galochka-napominalochka - Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ (—Å –¥–µ–¥–ª–∞–π–Ω–æ–º –∏ –±–µ–∑)
- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ñ–æ—Ç–æ NASA
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
"""

import telebot
import csv
import os
from telebot import types
import datetime
import time
import schedule
import requests
import threading

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞
token = os.environ.get("TELEGRAM_BOT_TOKEN")
if not token:
    # print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit()
bot = telebot.TeleBot(token)

# API –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ NASA (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
NASA_API_KEY = "XIvrocqXsocigfch2H8fHPVnZgSsgy1RnIbPgH8m"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
user_registration = {}

class Registration:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.name = ""  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.age = 0    # –í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    def get_name(self, message):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.name = message.text
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        bot.register_next_step_handler(message, self.get_age)

    def get_age(self, message):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –≤–≤–æ–¥–∞"""
        try:
            self.age = int(message.text)
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            keyboard = types.InlineKeyboardMarkup()
            key_yes = types.InlineKeyboardButton(text="–î–∞", callback_data="yes")
            keyboard.add(key_yes)
            key_no = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no")
            keyboard.add(key_no)

            question = f"–¢–µ–±–µ {self.age} –ª–µ—Ç, —Ç–µ–±—è –∑–æ–≤—É—Ç {self.name}?"
            bot.send_message(message.chat.id, question, reply_markup=keyboard)
        except ValueError:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
            bot.send_message(
                message.chat.id,
                f"–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é ü•π \n–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–∏—Ñ—Ä–∞–º–∏.",
            )
            bot.register_next_step_handler(message, self.get_age)

    def save_to_file(self, chat_id):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CSV —Ñ–∞–π–ª"""
        with open("users.csv", mode="a", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow([chat_id, self.name, self.age])


class Note:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–º–µ—Ç–æ–∫"""
    
    def __init__(self, chat_id, text):
        self.chat_id = chat_id  # ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.text = text        # –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏

    def save_to_file(self):
        """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö)"""
        raise NotImplementedError(
            "–ú–µ—Ç–æ–¥ save_to_file –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ"
        )


class NoteWithDeadline(Note):
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º (–Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç Note)"""
    
    def __init__(self, chat_id, text, deadline):
        super().__init__(chat_id, text)
        self.deadline = deadline  # –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        self.note_id = f"dd_{int(time.time())}"

    def save_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –≤ CSV —Ñ–∞–π–ª"""
        with open("notes_dd.csv", mode="a", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow(
                [self.chat_id, self.text, self.deadline, self.note_id]
            )


class NoteWithoutDeadline(Note):
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞ (–Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç Note)"""
    
    def __init__(self, chat_id, text):
        super().__init__(chat_id, text)
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        self.note_id = f"wo_{int(time.time())}"

    def save_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞ –≤ CSV —Ñ–∞–π–ª"""
        with open("notes_wo_dd.csv", mode="a", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow(
                [self.chat_id, self.text, self.note_id]
            )


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
REGISTERED_USERS_FILE = "users.csv"

def get_nasa_image():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–Ω—è –æ—Ç NASA API
    
    Returns:
        str: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ None, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å
    """
    url = f"https://api.nasa.gov/planetary/apod?api_key={NASA_API_KEY}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if "url" in data and data["media_type"] == "image":
            return data["url"]
    return None


def send_daily_reminders():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        # –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        with open(REGISTERED_USERS_FILE, "r", newline="", encoding="utf-8") as file:
            reader = csv.reader(file)
            for row in reader:
                chat_id = row[0]

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–Ω—è –æ—Ç NASA
                image_url = get_nasa_image()
                if image_url:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    tasks = get_tasks_for_user(chat_id)

                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏
                    task_message = "–ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n" + tasks

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    bot.send_photo(int(chat_id), image_url, caption=task_message)
                else:
                    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
                    bot.send_message(
                        int(chat_id), "–°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
                    )
    except FileNotFoundError:
        pass
    except Exception as e:
        pass


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ 10:00
schedule.every().day.at("10:00").do(send_daily_reminders)


def get_tasks_for_user(chat_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        chat_id (int): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
    """
    tasks = []

    # –ß—Ç–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å –¥–µ–¥–ª–∞–π–Ω–æ–º
    try:
        with open("notes_dd.csv", "r", newline="", encoding="utf-8") as file:
            reader = csv.reader(file)
            for row in reader:
                if row[0] == chat_id:
                    tasks.append(f"- {row[1]}: {row[2]}")
    except FileNotFoundError:
        pass

    # –ß—Ç–µ–Ω–∏–µ –∑–∞–¥–∞—á –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞
    try:
        with open("notes_wo_dd.csv", "r", newline="", encoding="utf-8") as file:
            reader = csv.reader(file)
            for row in reader:
                if row[0] == chat_id:
                    tasks.append(f"- {row[1]}")
    except FileNotFoundError:
        pass

    return "\n".join(tasks) if tasks else "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç."


def delete_note_from_file(chat_id, note_id, filename):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
    
    Args:
        chat_id (int): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        note_id (str): ID –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        filename (str): –ò–º—è —Ñ–∞–π–ª–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
        with open(filename, mode="r", newline="", encoding="utf-8") as file:
            notes = list(csv.reader(file))

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫ - –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —É–¥–∞–ª—è–µ–º–æ–π
        updated_notes = []
        for note in notes:
            if int(note[0]) == chat_id:
                if note_id != note[-1]:
                    updated_notes.append(note)
            else:
                updated_notes.append(note)

        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
        with open(filename, mode="w", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerows(updated_notes)

        return True

    except FileNotFoundError:
        return False
    except Exception as e:
        return False


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def start_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user_registration[message.chat.id] = Registration()
    bot.send_photo(
        message.chat.id,
        open("image.jpeg", "rb"),
        caption=f"–ü—Ä–∏–≤–µ—Ç! –Ø –ì–∞–ª–æ—á–∫–∞, —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∞–ª–æ—á–∫–∞ üöÄ \n–ú–æ–∂–µ—à—å —Å–º–µ–ª–æ –¥–æ–≤–µ—Ä—è—Ç—å –º–Ω–µ –≤—Å–µ —Å–≤–æ–∏ –ø–ª–∞–Ω—ã, –≤—Å—Ç—Ä–µ—á–∏ –∏ –∑–∞–¥–∞—á–∏, —è –≤—Å—ë –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞–∑–ª–æ–∂—É –ø–æ –ø–æ–ª–æ—á–∫–∞–º –∏ –Ω–µ –¥–∞–º —Ç–µ–±–µ –Ω–∏—á–µ–≥–æ –∑–∞–±—ã—Ç—å! \n–†–∞–¥–∞ –ø–æ–º–æ—á—å! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! ‚ú®",
    )
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ —É —Ç–µ–±—è –∏–º—è?")
    bot.register_next_step_handler(message, user_registration[message.chat.id].get_name)


def show_main_menu(chat_id):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_add_note = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É")
    button_delete_note = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
    button_show_notes = types.KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏")
    keyboard.add(button_add_note, button_delete_note, button_show_notes)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
    chat_id = call.message.chat.id

    if call.data == "yes":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reg = user_registration[chat_id]
        reg.save_to_file(chat_id)
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {reg.name} ü•∞",
        )
        show_main_menu(chat_id)
        del user_registration[chat_id]

    elif call.data == "no":
        # –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        bot.edit_message_text(
            chat_id=chat_id, message_id=call.message.message_id, text="–ñ–∞–ª—å :("
        )
        del user_registration[chat_id]

    elif call.data.startswith("delete|"):
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
        note_id = call.data.split("|")[1]
        filename = "notes_dd.csv" if note_id.startswith("dd") else "notes_wo_dd.csv"

        if delete_note_from_file(chat_id, note_id, filename):
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text="–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ",
            )
        else:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text="–û—à–∏–±–∫–∞: –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            )

        show_main_menu(chat_id)


@bot.message_handler(commands=["add_note"])
def add_note(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
    chat_id = message.chat.id

    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_with_deadline = types.KeyboardButton("–° –¥–µ–¥–ª–∞–π–Ω–æ–º")
    button_without_deadline = types.KeyboardButton("–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞")
    keyboard.add(button_with_deadline, button_without_deadline)

    bot.send_message(
        chat_id, "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –∏–ª–∏ –±–µ–∑?", reply_markup=keyboard
    )
    bot.register_next_step_handler(message, process_note_type)


def process_note_type(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–º–µ—Ç–∫–∏"""
    chat_id = message.chat.id
    if message.text == "–° –¥–µ–¥–ª–∞–π–Ω–æ–º":
        bot.send_message(
            chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:", reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(message, process_note_with_deadline_text)
    elif message.text == "–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞":
        bot.send_message(
            chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:", reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(message, process_note_without_deadline_text)
    else:
        bot.send_message(
            chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫."
        )
        add_note(message)


def process_note_with_deadline_text(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º"""
    chat_id = message.chat.id
    text = message.text
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
    bot.register_next_step_handler(message, process_note_with_deadline_deadline, text)


def process_note_with_deadline_deadline(message, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–º–µ—Ç–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ñ–æ—Ä–º–∞—Ç–∞"""
    chat_id = message.chat.id
    deadline = message.text
    try:
        datetime.datetime.strptime(deadline, "%Y-%m-%d %H:%M")
        note = NoteWithDeadline(chat_id, text, deadline)
        note.save_to_file()
        bot.send_message(
            chat_id,
            "–ó–∞–º–µ—Ç–∫–∞ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        show_main_menu(chat_id)
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        bot.register_next_step_handler(
            message, process_note_with_deadline_deadline, text
        )


def process_note_without_deadline_text(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–º–µ—Ç–∫–∏ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"""
    chat_id = message.chat.id
    text = message.text
    note = NoteWithoutDeadline(chat_id, text)
    note.save_to_file()
    bot.send_message(
        chat_id,
        "–ó–∞–º–µ—Ç–∫–∞ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    show_main_menu(chat_id)


@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
def handle_delete_note(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""
    chat_id = message.chat.id
    notes = NoteManager.get_user_notes(chat_id)
    if not notes:
        bot.send_message(
            chat_id,
            "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤—ã —Å—á–∞—Å—Ç–ª–∏–≤—ã üòä",
        )
        show_main_menu(chat_id)
        return

    keyboard = types.InlineKeyboardMarkup()
    for note in notes:
        button_text = f"{note['text']} ({note['type']})"
        callback_data = f"delete|{note['id']}"
        keyboard.add(
            types.InlineKeyboardButton(text=button_text, callback_data=callback_data)
        )

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É")
def handle_add_note(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    add_note(message)


@bot.message_handler(func=lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏")
def handle_show_notes(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫"""
    chat_id = message.chat.id
    notes = NoteManager.get_user_notes(chat_id)
    if not notes:
        bot.send_message(
            chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫. –ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤—ã —Å—á–∞—Å—Ç–ª–∏–≤—ã üòä"
        )
    else:
        response = "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n"
        for note in notes:
            response += f"- {note['text']} ({note['type']})"
            if note["type"] == "–° –¥–µ–¥–ª–∞–π–Ω–æ–º":
                response += f", –¥–µ–¥–ª–∞–π–Ω: {note['deadline']}"
            response += "\n"
        bot.send_message(chat_id, response)
    show_main_menu(chat_id)


def check_deadlines_and_notify():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    with open(REGISTERED_USERS_FILE, "r", newline="", encoding="utf-8") as file:
        reader = csv.reader(file)
        for row in reader:
            chat_id = row[0]
            notes_reminder = []
            today = datetime.date.today()
            tomorrow = today + datetime.timedelta(days=1)

            with open("notes_dd.csv", "r", newline="", encoding="utf-8") as file:
                reader = csv.reader(file)
                for row in reader:
                    if len(row) >= 4:
                        note_chat_id, text, deadline_str, note_id = (
                            row[0], row[1], row[2], row[3])
                        if chat_id is not None and int(note_chat_id) != int(chat_id):
                            continue
                        try:
                            deadline_date = datetime.datetime.strptime(
                                deadline_str.split()[0], "%Y-%m-%d"
                            ).date()
                            if deadline_date == tomorrow:
                                notes_reminder.append(f"-{text}\n")
                            if len(notes_reminder) != 0:
                                notes_remind = "\n".join(notes_reminder)
                                message = (
                                    f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ó–∞–≤—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω –ø–æ –∑–∞–¥–∞—á–µ:\n"
                                    + notes_remind
                                )
                                bot.send_message(int(note_chat_id), message)
                        except (ValueError, IndexError):
                            pass


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –≤ 16:00
schedule.every().day.at("19:00").do(check_deadlines_and_notify)


def run_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    while True:
        schedule.run_pending()
        time.sleep(10)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    scheduler_thread = threading.Thread(target=run_scheduler)
    scheduler_thread.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    bot.polling(none_stop=True)